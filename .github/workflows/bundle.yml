name: Build and Deploy

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Select the target platform(s) to build'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - macos
          - windows
          - linux

jobs:
  macos:
    if: ${{ github.event.inputs.target == 'all' || github.event.inputs.target == 'macos' }}
    name: Build for macOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.x

      - name: Get yarn cache directory and package version
        id: yarn-cache-dir-path
        run: |
          echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
          echo "version=$(node -p -e "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Cache Icons
        uses: actions/cache@v4
        with:
          path: assets
          key: icon-assets-${{ hashFiles('assets/scalable/icon.svg') }}
          restore-keys: icon-assets

      - name: Install dependencies
        run: yarn install --frozen-lockfile --non-interactive

      - name: Configure Keychain for Signing
        env:
          CERTIFICATE_PASSWORD: ${{ secrets.DECP }}
        run: |
          security create-keychain -p "$CERTIFICATE_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$CERTIFICATE_PASSWORD" build.keychain
          echo "${{ secrets.DEVC }}" | base64 --decode > certificate.p12
          security import certificate.p12 -k ~/Library/Keychains/build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -k "$CERTIFICATE_PASSWORD" build.keychain

      - name: Build and Sign Electron App
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: yarn bundle --mac

      - name: Upload macOS Artifacts to Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*.dmg"
          allowUpdates: true
          tag: ${{ steps.yarn-cache-dir-path.outputs.version }}
          name: Release ${{ steps.yarn-cache-dir-path.outputs.version }}

  windows:
    if: ${{ github.event.inputs.target == 'all' || github.event.inputs.target == 'windows' }}
    name: Build for Windows and Headless
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.x

      - name: Get yarn cache directory and package version
        id: yarn-cache-dir-path
        run: |
          echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
          echo "version=$(node -p -e "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Cache Icons
        uses: actions/cache@v4
        with:
          path: assets
          key: icon-assets-${{ hashFiles('assets/scalable/icon.svg') }}
          restore-keys: icon-assets
  
      - name: Install dependencies
        run: yarn install --frozen-lockfile --non-interactive
  
      - name: Build Windows App
        env:
          CERTIFICATE_PASSWORD: ${{ secrets.DECP }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: yarn bundle --win && yarn bundle:headless

      - name: Upload Windows Artifacts to Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*.exe,dist/*.zip"
          allowUpdates: true
          tag: ${{ steps.yarn-cache-dir-path.outputs.version }}
          name: Release ${{ steps.yarn-cache-dir-path.outputs.version }}

  linux:
    if: ${{ github.event.inputs.target == 'all' || github.event.inputs.target == 'linux' }}
    name: Build for Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.x

      - name: Get yarn cache directory and package version
        id: yarn-cache-dir-path
        run: |
          echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
          echo "version=$(node -p -e "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Cache Icons
        uses: actions/cache@v4
        with:
          path: assets
          key: icon-assets-${{ hashFiles('assets/scalable/icon.svg') }}
          restore-keys: icon-assets

      - name: Install dependencies
        run: yarn install --frozen-lockfile --non-interactive

      # - name: Build Linux App
      #   env:
      #     CERTIFICATE_PASSWORD: ${{ secrets.DECP }}
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: yarn bundle --linux
        
      - name: Build Flatpak
        run: |
          # Set up Yarn offline mirror and install
          sudo apt install -y pipx flatpak-builder
          pipx install git+https://github.com/flatpak/flatpak-builder-tools.git#subdirectory=node
          flatpak-node-generator yarn yarn.lock
          echo "[DEBUG] flatpak node generator completed"

          # Run Flatpak build
          mkdir -p flatpak-build-dir
          flatpak-builder --user --force-clean \
            --install-deps-from=flathub \
            --install-deps-from=flathub-beta \
            --repo=repo \
            flatpak-build-dir \
            com.github.victorwads.QRookieNode.yml
      
          # Bundle the final Flatpak
          flatpak build-bundle repo com.github.victorwads.QRookieNode.flatpak com.github.victorwads.QRookieNode      

      - name: Upload Linux Artifacts to Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*.AppImage,dist/*.deb,dist/*.rpm,dist/*.zip,*.flatpak"
          allowUpdates: true
          tag: ${{ steps.yarn-cache-dir-path.outputs.version }}
          name: Release ${{ steps.yarn-cache-dir-path.outputs.version }}
